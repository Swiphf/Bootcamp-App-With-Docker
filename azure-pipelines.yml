trigger:
- master

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'd02d66cb-c563-44a5-8b76-e7e1f0fa5511'
  imageRepository: 'weighttrackerimage'
  containerRegistry: 'containerregistryweek9.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

# CI 
stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      name: bootcamp-pool-1
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

# CD staging
- stage: DeployToStaging
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: staging
    displayName: Deploy to Staging
    environment:
      name: staging
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: CmdLine@2
            displayName: Stop Current Container
            inputs:
              script: 'docker rm -f  weighttracker || true'
          - task: Docker@2
            displayName: 'Login to Registry'
            inputs:
              containerRegistry: $(dockerRegistryServiceConnection)
              command: 'login'

          - task: CmdLine@2
            displayName: Pull image
            inputs:
              script: 'docker pull $(containerRegistry)/$(imageRepository):$(tag)'

          - task: CmdLine@2
            displayName: Run New Container
            inputs:
              script: 'docker run -d --name weighttracker -p 8080:8080 -e PG_HOST=$(PG_HOST) -e PORT=$(PORT) -e HOST=$(HOST) -e PG_USERNAME=$(PG_USERNAME) -e PG_DATABASE=postgres -e PG_PASSWORD=$(PG_PASSWORD) -e PG_PORT=$(PG_PORT) -e HOST_URL=$(HOST_URL) -e COOKIE_ENCRYPT_PWD=$(COOKIE_ENCRYPT_PWD) -e NODE_ENV=development -e OKTA_ORG_URL=$(OKTA_ORG_URL) -e OKTA_CLIENT_ID=$(OKTA_CLIENT_ID) -e OKTA_CLIENT_SECRET=$(OKTA_CLIENT_SECRET) $(containerRegistry)/$(imageRepository):$(tag)'